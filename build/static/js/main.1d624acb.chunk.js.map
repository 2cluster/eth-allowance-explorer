{"version":3,"sources":["components/NoWalletDetected.js","components/NetworkErrorMessage.js","components/ConnectWallet.js","components/Loading.js","components/Transfer.js","components/TransferFrom.js","components/Allowance.js","components/TransactionErrorMessage.js","components/WaitingForTransactionMessage.js","components/NoTokensMessage.js","components/Contract.js","components/Dapp.js","index.js"],"names":["NoWalletDetected","className","href","target","rel","NetworkErrorMessage","message","dismiss","role","type","data-dismiss","aria-label","onClick","aria-hidden","ConnectWallet","connectWallet","networkError","Loading","style","position","zIndex","top","left","width","height","background","marginLeft","marginTop","textAlign","Transfer","transferTokens","tokenSymbol","accounts","onSubmit","event","preventDefault","formData","FormData","to","get","amount","step","name","placeholder","required","value","lender","borrower","TransferFrom","transferFromTokens","from","Allowance","approve","TransactionErrorMessage","substring","WaitingForTransactionMessage","txHash","NoTokensMessage","selectedAddress","Contract","tokenData","symbol","address","Math","round","total","decimals","toFixed","toString","Dapp","props","initialState","undefined","selectedName","balance","allowance","txBeingSent","transactionError","accountError","state","window","ethereum","this","_connectWallet","_dismissNetworkError","controller","toLowerCase","_dismissAccountError","console","log","p1balance","p1allowance","p2balance","p2allowance","_getRpcErrorMessage","_dismissTransactionError","eq","gt","_transferTokens","_transferFromTokens","_setAllowance","_stopPollingData","enable","_checkNetwork","_initialize","on","newAddress","_resetState","userAddress","ACC","wallet","Object","keys","forEach","key","setState","_intializeEthers","_getTokenData","_startPollingData","_provider","ethers","providers","Web3Provider","_token","ADR","contract","ABI","abi","getSigner","_pollDataInterval","setInterval","_updateAccount","clearInterval","totalSupply","balanceOf","transfer","tx","hash","wait","status","Error","code","error","transferFrom","tx2","network","networkVersion","networkId","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"y7eAEO,SAASA,IACd,OACE,yBAAKC,UAAU,aACb,yBAAKA,UAAU,iCACb,yBAAKA,UAAU,yBACb,+DACmC,6BADnC,iBAEiB,IACf,uBACEC,KAAK,qBACLC,OAAO,SACPC,IAAI,uBAHN,YAHF,QCLH,SAASC,EAAT,GAAoD,IAArBC,EAAoB,EAApBA,QAASC,EAAW,EAAXA,QAC7C,OACE,yBAAKN,UAAU,qBAAqBO,KAAK,SACtCF,EACD,4BACEG,KAAK,SACLR,UAAU,QACVS,eAAa,QACbC,aAAW,QACXC,QAASL,GAET,0BAAMM,cAAY,QAAlB,UCTD,SAASC,EAAT,GAAkE,IAAzCC,EAAwC,EAAxCA,cAAeC,EAAyB,EAAzBA,aAAcT,EAAW,EAAXA,QAC3D,OACE,yBAAKN,UAAU,aACb,yBAAKA,UAAU,iCACb,yBAAKA,UAAU,sBACZe,GACC,kBAACX,EAAD,CACEC,QAASU,EACTT,QAASA,KAIf,yBAAKN,UAAU,yBACb,6DACA,4BACEA,UAAU,kBACVQ,KAAK,SACLG,QAASG,GAHX,qBChBH,SAASE,IACd,OACE,yBACEC,MAAO,CACLC,SAAU,QACVC,OAAQ,EACRC,IAAK,EACLC,KAAM,EACNC,MAAO,OACPC,OAAQ,OACRC,WAAY,6BAGd,yBACEP,MAAO,CACLC,SAAU,WACVC,OAAQ,EACRC,IAAK,MACLC,KAAM,MACNC,MAAO,QACPC,OAAQ,OACRE,WAAY,QACZC,UAAW,SACXC,UAAW,WAGb,yBAAK3B,UAAU,iBAAiBO,KAAK,UACnC,0BAAMP,UAAU,WAAhB,iBC3BH,SAAS4B,EAAT,GAA8D,IAA1CC,EAAyC,EAAzCA,eAAgBC,EAAyB,EAAzBA,YAAaC,EAAY,EAAZA,SACtD,OACE,6BACE,wCACA,0BACEC,SAAU,SAACC,GAGTA,EAAMC,iBAEN,IAAMC,EAAW,IAAIC,SAASH,EAAM/B,QAC9BmC,EAAKF,EAASG,IAAI,MAClBC,EAASJ,EAASG,IAAI,UAExBD,GAAME,GACRV,EAAeQ,EAAIE,KAIvB,yBAAKvC,UAAU,cACb,4CAAkB8B,GAClB,2BACE9B,UAAU,eACVQ,KAAK,SACLgC,KAAK,IACLC,KAAK,SACLC,YAAY,IACZC,UAAQ,KAGZ,yBAAK3C,UAAU,cACf,4CACE,4BAAQyC,KAAK,KAAKzC,UAAU,gBAC1B,4BAAQyC,KAAK,KAAKG,MAAOb,EAASc,QAAlC,UACA,4BAAQJ,KAAK,KAAKG,MAAOb,EAASe,UAAlC,cAGJ,yBAAK9C,UAAU,cACb,2BAAOA,UAAU,kBAAkBQ,KAAK,SAASoC,MAAM,gBCtC1D,SAASG,EAAT,GAAsE,IAA9CC,EAA6C,EAA7CA,mBAAoBlB,EAAyB,EAAzBA,YAAaC,EAAY,EAAZA,SAC9D,OACE,6BACE,4CACA,0BACEC,SAAU,SAACC,GAGTA,EAAMC,iBAEN,IAAMC,EAAW,IAAIC,SAASH,EAAM/B,QAC9B+C,EAAOd,EAASG,IAAI,QACpBD,EAAKF,EAASG,IAAI,MAClBC,EAASJ,EAASG,IAAI,UAExBW,GAAQZ,GAAME,GAChBS,EAAmBC,EAAMZ,EAAIE,KAIjC,yBAAKvC,UAAU,cACb,4CAAkB8B,GAClB,2BACE9B,UAAU,eACVQ,KAAK,SACLgC,KAAK,IACLC,KAAK,SACLC,YAAY,IACZC,UAAQ,KAGZ,yBAAK3C,UAAU,cACf,yCACE,4BAAQyC,KAAK,OAAOzC,UAAU,gBAC5B,4BAAQyC,KAAK,OAAOG,MAAOb,EAASe,UAApC,YACA,4BAAQL,KAAK,OAAOG,MAAOb,EAASc,QAApC,YAGJ,yBAAK7C,UAAU,cACf,4CACE,4BAAQyC,KAAK,KAAKzC,UAAU,gBAC1B,4BAAQyC,KAAK,KAAKG,MAAOb,EAASe,UAAlC,YACA,4BAAQL,KAAK,KAAKG,MAAOb,EAASc,QAAlC,YAGJ,yBAAK7C,UAAU,cACb,2BAAOA,UAAU,kBAAkBQ,KAAK,SAASoC,MAAM,gBC9C1D,SAASM,EAAT,GAAiC,IAAZC,EAAW,EAAXA,QAC1B,OACE,6BACE,uCACA,0BACEnB,SAAU,SAACC,GAGTA,EAAMC,iBAEN,IACMK,EADW,IAAIH,SAASH,EAAM/B,QACZoC,IAAI,UAGxBC,GACFY,EAAQZ,KAIZ,yBAAKvC,UAAU,cACb,yCACA,2BACEA,UAAU,eACVQ,KAAK,SACLgC,KAAK,IACLC,KAAK,SACLC,YAAY,IACZC,UAAQ,KAGZ,yBAAK3C,UAAU,cACb,2BAAOA,UAAU,kBAAkBQ,KAAK,SAASoC,MAAM,eC/B1D,SAASQ,EAAT,GAAwD,IAArB/C,EAAoB,EAApBA,QAASC,EAAW,EAAXA,QACjD,OACE,yBAAKN,UAAU,qBAAqBO,KAAK,SAAzC,8BAC8BF,EAAQgD,UAAU,EAAG,KACjD,4BACE7C,KAAK,SACLR,UAAU,QACVS,eAAa,QACbC,aAAW,QACXC,QAASL,GAET,0BAAMM,cAAY,QAAlB,UCXD,SAAS0C,EAAT,GAAmD,IAAXC,EAAU,EAAVA,OAC7C,OACE,yBAAKvD,UAAU,mBAAmBO,KAAK,SAAvC,2BAC0B,gCAASgD,GADnC,gBCFG,SAASC,EAAT,GAA8C,EAAnBC,gBAChC,OACE,oCACE,iECHC,SAASC,EAAT,GAAkC,IAAdC,EAAa,EAAbA,UACvB,OACI,yBACI1C,MAAO,CACHO,WAAY,uBACZF,MAAO,SAGX,yBAAKtB,UAAU,aACX,6CACA,yBAAKA,UAAU,OACX,yBAAKA,UAAU,SACX,qCACA,sCACA,uCACA,4CAEJ,yBAAKA,UAAU,UACX,2BAAG,2BAAI2D,EAAUlB,OACjB,2BAAG,2BAAIkB,EAAUC,SACjB,2BAAG,2BAAID,EAAUE,UACjB,2BAAG,iCAAOC,KAAKC,MAAMJ,EAAUK,MAAV,SAAkBL,EAAUM,SAAY,KAAnDH,KAAA,IAA0DH,EAAUM,SAAY,KAAKC,QAAQP,EAAUM,UAAUE,iBCGnJ,IAGaC,EAAb,kDACE,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,aAAe,CAClBX,eAAWY,EACXP,WAAOO,EACPd,qBAAiBc,EACjBC,kBAAcD,EACdE,aAASF,EACTG,eAAWH,EACXI,iBAAaJ,EACbK,sBAAkBL,EAClBxD,kBAAcwD,EACdM,kBAAcN,GAGhB,EAAKO,MAAQ,EAAKR,aAhBD,EADrB,qDAuBY,IAAD,OAEP,YAAwBC,IAApBQ,OAAOC,SACF,kBAACjF,EAAD,MAILkF,KAAKH,MAAM/D,aAEX,kBAACF,EAAD,CACEC,cAAe,kBAAM,EAAKoE,kBAC1BnE,aAAckE,KAAKH,MAAM/D,aACzBT,QAAS,kBAAM,EAAK6E,0BAKtBF,KAAKH,MAAMD,mBACWN,IAAxBU,KAAKH,MAAM/C,UACTkD,KAAKH,MAAMrB,kBAAoBwB,KAAKH,MAAM/C,SAASqD,WAAWC,eAAmBJ,KAAKH,MAAMrB,kBAAoBwB,KAAKH,MAAM/C,SAASc,OAAOwC,eAAmBJ,KAAKH,MAAMrB,kBAAoBwB,KAAKH,MAAM/C,SAASe,SAASuC,cAE1N,kBAACxE,EAAD,CACEC,cAAe,kBAAM,EAAKoE,kBAC1BnE,aAAckE,KAAKH,MAAMD,aACzBvE,QAAS,kBAAM,EAAKgF,0BAKrBL,KAAKH,MAAMnB,WAAcsB,KAAKH,MAAM/C,UAGzCwD,QAAQC,IAAIP,KAAKH,OACe,eAA5BG,KAAKH,MAAMN,aAEX,yBAAKxE,UAAU,IACb,yBAAKA,UAAU,OACb,kBAAC0D,EAAD,CAAUC,UAAWsB,KAAKH,MAAMnB,aAIlC,yBAAK3D,UAAU,aAEf,oDAEE,yBAAKA,UAAU,OACb,yBAAKA,UAAU,kBACb,sCACA,wCACY,iCAAO8D,KAAKC,MAAMkB,KAAKH,MAAMW,UAAX,SAAuBR,KAAKH,MAAMnB,UAAUM,SAAY,KAAnEH,KAAA,IAA0EmB,KAAKH,MAAMnB,UAAUM,SAAY,KAAKC,QAAQe,KAAKH,MAAMnB,UAAUM,UAAUE,aAE1K,wCACY,iCAAOL,KAAKC,MAAMkB,KAAKH,MAAMY,YAAX,SAAyBT,KAAKH,MAAMnB,UAAUM,SAAY,KAArEH,KAAA,IAA4EmB,KAAKH,MAAMnB,UAAUM,SAAY,KAAKC,QAAQe,KAAKH,MAAMnB,UAAUM,UAAUE,cAG9K,yBAAKnE,UAAU,kBACb,wCACA,wCACY,iCAAO8D,KAAKC,MAAMkB,KAAKH,MAAMa,UAAX,SAAuBV,KAAKH,MAAMnB,UAAUM,SAAY,KAAnEH,KAAA,IAA0EmB,KAAKH,MAAMnB,UAAUM,SAAY,KAAKC,QAAQe,KAAKH,MAAMnB,UAAUM,UAAUE,aAE1K,wCACY,iCAAOL,KAAKC,MAAMkB,KAAKH,MAAMc,YAAX,SAAyBX,KAAKH,MAAMnB,UAAUM,SAAY,KAArEH,KAAA,IAA4EmB,KAAKH,MAAMnB,UAAUM,SAAY,KAAKC,QAAQe,KAAKH,MAAMnB,UAAUM,UAAUE,eAIhL,6BACGc,KAAKH,MAAMH,aAAgB,kBAACrB,EAAD,CAA8BC,OAAQ0B,KAAKH,MAAMH,cAC5EM,KAAKH,MAAMF,kBACV,kBAACxB,EAAD,CACE/C,QAAS4E,KAAKY,oBAAoBZ,KAAKH,MAAMF,kBAC7CtE,QAAS,kBAAM,EAAKwF,+BAM5B,yBAAK9F,UAAU,aACb,yBAAKA,UAAU,cACZiF,KAAKH,MAAML,QAAQsB,GAAG,IACrB,kBAACvC,EAAD,CAAiBC,gBAAiBwB,KAAKH,MAAMrB,kBAE9CwB,KAAKH,MAAML,QAAQuB,GAAG,IACrB,kBAACpE,EAAD,CACEC,eAAgB,SAACQ,EAAIE,GAAL,OACd,EAAK0D,gBAAgB5D,EAAIE,IAE3BT,YAAamD,KAAKH,MAAMnB,UAAUC,OAClC7B,SAAUkD,KAAKH,MAAM/C,YAI3B,yBAAK/B,UAAU,cACZiF,KAAKH,MAAML,QAAQsB,GAAG,IACrB,kBAACvC,EAAD,CAAiBC,gBAAiBwB,KAAKH,MAAMrB,kBAE9CwB,KAAKH,MAAML,QAAQuB,GAAG,IACrB,kBAACjD,EAAD,CACAC,mBAAoB,SAACC,EAAMZ,EAAIE,GAAX,OAChB,EAAK2D,oBAAoBjD,EAAMZ,EAAIE,IAErCT,YAAamD,KAAKH,MAAMnB,UAAUC,OAClC7B,SAAUkD,KAAKH,MAAM/C,eAUI,WAA5BkD,KAAKH,MAAMN,cAAyD,aAA5BS,KAAKH,MAAMN,aAE1D,yBAAKxE,UAAU,IACb,yBAAKA,UAAU,OACb,kBAAC0D,EAAD,CAAUC,UAAWsB,KAAKH,MAAMnB,aAIlC,yBAAK3D,UAAU,aACb,yBAAKA,UAAU,OACb,4BAAKiF,KAAKH,MAAMN,eAEhB,yBAAKxE,UAAU,YACb,yBAAKA,UAAU,SACb,uCACA,gDAEF,yBAAKA,UAAU,SACb,2BAAG,iCAAO8D,KAAKC,MAAMkB,KAAKH,MAAML,QAAX,SAAqBQ,KAAKH,MAAMnB,UAAUM,SAAY,KAAjEH,KAAA,IAAwEmB,KAAKH,MAAMnB,UAAUM,SAAY,KAAKC,QAAQe,KAAKH,MAAMnB,UAAUM,UAAUE,aAC/J,2BAAG,iCAAOL,KAAKC,MAAMkB,KAAKH,MAAMJ,UAAX,SAAuBO,KAAKH,MAAMnB,UAAUM,SAAY,KAAnEH,KAAA,IAA0EmB,KAAKH,MAAMnB,UAAUM,SAAY,KAAKC,QAAQe,KAAKH,MAAMnB,UAAUM,UAAUE,eAIrK,6BAEGc,KAAKH,MAAMH,aAAgB,kBAACrB,EAAD,CAA8BC,OAAQ0B,KAAKH,MAAMH,cAE5EM,KAAKH,MAAMF,kBACV,kBAACxB,EAAD,CACE/C,QAAS4E,KAAKY,oBAAoBZ,KAAKH,MAAMF,kBAC7CtE,QAAS,kBAAM,EAAKwF,+BAG5B,yBAAK9F,UAAU,YACb,yBAAKA,UAAU,SAEZiF,KAAKH,MAAML,QAAQsB,GAAG,IACrB,kBAACvC,EAAD,CAAiBC,gBAAiBwB,KAAKH,MAAMrB,kBAG9CwB,KAAKH,MAAML,QAAQuB,GAAG,IACrB,kBAAC9C,EAAD,CACEC,QAAS,SAACZ,GAAD,OACP,EAAK4D,cAAc5D,IAErBT,YAAamD,KAAKH,MAAMnB,UAAUC,UAIxC,yBAAK5D,UAAU,OACb,yBAAKA,UAAU,SAEZiF,KAAKH,MAAML,QAAQsB,GAAG,aApD9B,GAjFE,kBAAC/E,EAAD,QArDb,6CA0MIiE,KAAKmB,qBA1MT,kLA+MoCrB,OAAOC,SAASqB,SA/MpD,sCA+MW5C,EA/MX,KAiNSwB,KAAKqB,gBAjNd,iDAqNIrB,KAAKsB,YAAY9C,GAEjBsB,OAAOC,SAASwB,GAAG,mBAAmB,YAAmB,IAAjBC,EAAgB,oBACtD,EAAKL,mBACL,EAAKM,cAEL,EAAKH,YAAYE,MAKnB1B,OAAOC,SAASwB,GAAG,kBAAkB,YAAiB,oBACpD,EAAKJ,mBACL,EAAKM,iBAlOX,kLAsOoBC,GAtOpB,kFAwOQ5E,EAAW6E,EAAI7E,SACf8E,EAAS,GACTrC,OAAeD,EA1OvB,SA2OUuC,OAAOC,KAAKhF,GAAUiF,SAAQ,SAAAC,GAC9BN,EAAYtB,gBAAkB4B,EAAI5B,eACpCb,EAAezC,EAASkF,GACxBJ,EAAO9E,EAASkF,IAAQA,GAExBJ,EAAO9E,EAASkF,IAAQA,KAhPhC,uBAoPUhC,KAAKiC,SAAS,CAClBnF,SAAU8E,EACVrC,aAAcA,EACdf,gBAAiBkD,IAvPvB,eA0PyBpC,IAAjBC,EA1PR,wBA2PMS,KAAKiC,SAAS,CACZrC,aAAc,6EA5PtB,mBA8Pa,GA9Pb,eAiQII,KAAKkC,mBACLlC,KAAKmC,gBACLnC,KAAKoC,oBAnQT,mBAqQW,GArQX,2PAyQIpC,KAAKqC,UAAY,IAAIC,IAAOC,UAAUC,aAAa1C,OAAOC,UAE1DC,KAAKyC,OAAS,IAAIH,IAAO7D,SACvBiE,EAAIC,SACJC,EAAIC,IACJ7C,KAAKqC,UAAUS,UAAU,IA9Q/B,gJAoRuB,IAAD,OAClB9C,KAAK+C,kBAAoBC,aAAY,kBAAM,EAAKC,mBAAkB,KAElEjD,KAAKiD,mBAvRT,yCA4RIC,cAAclD,KAAK+C,mBACnB/C,KAAK+C,uBAAoBzD,IA7R7B,8KAiSuBU,KAAKyC,OAAOjF,OAjSnC,cAiSUA,EAjSV,gBAkSyBwC,KAAKyC,OAAO9D,SAlSrC,cAkSUA,EAlSV,gBAmS2BqB,KAAKyC,OAAOzD,WAnSvC,cAmSUA,EAnSV,iBAoSwBgB,KAAKyC,OAAOU,cApSpC,eAoSUpE,EApSV,iBAqS0BiB,KAAKyC,OAAO7D,QArStC,QAqSUA,EArSV,OAuSIoB,KAAKiC,SAAS,CAAEvD,UAAW,CAAElB,OAAMmB,SAAQK,WAAUD,QAAOH,aAvShE,6QA4SQoB,KAAKH,MAAMrB,kBAAoBwB,KAAKH,MAAM/C,SAASqD,WAAWC,cA5StE,iCA6S0BJ,KAAKyC,OAAOW,UAAUpD,KAAKH,MAAMrB,iBA7S3D,cA6SUgB,EA7SV,gBA8S4BQ,KAAKyC,OAAOhD,UAAUO,KAAKH,MAAMrB,gBAAiBwB,KAAKH,MAAM/C,SAASqD,YA9SlG,cA8SUV,EA9SV,gBAgTYO,KAAKiC,SAAS,CAAEzC,UAASC,cAhTrC,gDAoT0BO,KAAKyC,OAAOW,UAAUpD,KAAKH,MAAMrB,iBApT3D,eAoTUgB,EApTV,iBAsTYQ,KAAKiC,SAAS,CAAEzC,YAtT5B,yBAwT4BQ,KAAKyC,OAAOW,UAAUpD,KAAKH,MAAM/C,SAASc,QAxTtE,eAwTU4C,EAxTV,iBAyT8BR,KAAKyC,OAAOhD,UAAUO,KAAKH,MAAM/C,SAASc,OAAQoC,KAAKH,MAAM/C,SAASqD,YAzTpG,eAyTUM,EAzTV,iBA2TYT,KAAKiC,SAAS,CAAEzB,YAAWC,gBA3TvC,yBA6T4BT,KAAKyC,OAAOW,UAAUpD,KAAKH,MAAM/C,SAASe,UA7TtE,eA6TU6C,EA7TV,iBA8T8BV,KAAKyC,OAAOhD,UAAUO,KAAKH,MAAM/C,SAASe,SAAUmC,KAAKH,MAAM/C,SAASqD,YA9TtG,eA8TUQ,EA9TV,iBAgUYX,KAAKiC,SAAS,CAAEvB,YAAWC,gBAhUvC,sLAwUwBvD,EAAIE,GAxU5B,uFA2UM0C,KAAKa,2BA3UX,SA6UuBb,KAAKyC,OAAOY,SAASjG,EAAIE,GA7UhD,cA6UYgG,EA7UZ,OA8UMtD,KAAKiC,SAAS,CAAEvC,YAAa4D,EAAGC,OA9UtC,SAgV4BD,EAAGE,OAhV/B,UAkV6B,IAlV7B,OAkVkBC,OAlVlB,uBAoVc,IAAIC,MAAM,sBApVxB,yBAuVY1D,KAAKiD,iBAvVjB,6DAHuC,OA6V7B,KAAMU,KA1VhB,mDA8VMrD,QAAQsD,MAAR,MACA5D,KAAKiC,SAAS,CAAEtC,iBAAiB,EAAD,KA/VtC,yBAkWMK,KAAKiC,SAAS,CAAEvC,iBAAaJ,IAlWnC,yNAsW4BtB,EAAMZ,EAAIE,GAtWtC,uFAyWM0C,KAAKa,2BAzWX,SA4WuBb,KAAKyC,OAAOoB,aAAa7F,EAAMZ,EAAIE,GA5W1D,cA4WYgG,EA5WZ,OA6WMtD,KAAKiC,SAAS,CAAEvC,YAAa4D,EAAGC,OA7WtC,SA+W4BD,EAAGE,OA/W/B,UAiX6B,IAjX7B,OAiXkBC,OAjXlB,uBAmXc,IAAIC,MAAM,sBAnXxB,yBAsXY1D,KAAKiD,iBAtXjB,6DAHuC,OA4X7B,KAAMU,KAzXhB,mDA6XM3D,KAAKiC,SAAS,CAAEtC,iBAAiB,EAAD,KA7XtC,yBAgYMK,KAAKiC,SAAS,CAAEvC,iBAAaJ,IAhYnC,qNAoYsBhC,GApYtB,uFAwYM0C,KAAKa,2BAxYX,SA0YwBb,KAAKyC,OAAOvE,QAAQ8B,KAAKH,MAAM/C,SAASqD,WAAY7C,GA1Y5E,cA0YYwG,EA1YZ,OA2YM9D,KAAKiC,SAAS,CAAEvC,YAAaoE,EAAIP,OA3YvC,SA6Y4BO,EAAIN,OA7YhC,UA+Y6B,IA/Y7B,OA+YkBC,OA/YlB,uBAgZc,IAAIC,MAAM,sBAhZxB,yBAmZY1D,KAAKiD,iBAnZjB,6DAHuC,OAyZ7B,KAAMU,KAtZhB,mDA0ZMrD,QAAQsD,MAAR,MACA5D,KAAKiC,SAAS,CAAEtC,iBAAiB,EAAD,KA3ZtC,yBA8ZMK,KAAKiC,SAAS,CAAEvC,iBAAaJ,IA9ZnC,qLAmaIU,KAAKiC,SAAS,CAAEtC,sBAAkBL,MAnatC,6CAuaIU,KAAKiC,SAAS,CAAEnG,kBAAcwD,MAvalC,6CA2aIU,KAAKiC,SAAS,CAAErC,kBAAcN,MA3alC,0CA+asBsE,GAGlB,OAFUA,EAECA,MAAMxI,UAlbrB,oCAsbI4E,KAAKiC,SAASjC,KAAKX,gBAtbvB,sCA0bI,IAAI0E,EAAUrB,EAAIqB,QAElB,OAAIjE,OAAOC,SAASiE,iBAAmBtB,EAAIuB,YACzCjE,KAAKiC,SAAS,CACZnG,aAAa,uCAAD,OAAyCiI,MAGhD,KAjcb,uCAwcI,YAA4BzE,IAAxBU,KAAKH,MAAM/C,WACXkD,KAAKH,MAAMrB,kBAAoBwB,KAAKH,MAAM/C,SAASqD,WAAWC,eAAmBJ,KAAKH,MAAMrB,kBAAoBwB,KAAKH,MAAM/C,SAASc,OAAOwC,eAAmBJ,KAAKH,MAAMrB,kBAAoBwB,KAAKH,MAAM/C,SAASe,SAASuC,iBAC5NJ,KAAKiC,SAAS,CACZrC,aAAc,4EAET,OA7cb,GAA0BsE,IAAMC,W,MCtBhCC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.1d624acb.chunk.js","sourcesContent":["import React from \"react\";\n\nexport function NoWalletDetected() {\n  return (\n    <div className=\"container\">\n      <div className=\"row justify-content-md-center\">\n        <div className=\"col-6 p-4 text-center\">\n          <p>\n            No Ethereum wallet was detected. <br />\n            Please install{\" \"}\n            <a\n              href=\"http://metamask.io\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              MetaMask\n            </a>\n            .\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport function NetworkErrorMessage({ message, dismiss }) {\n  return (\n    <div className=\"alert alert-danger\" role=\"alert\">\n      {message}\n      <button\n        type=\"button\"\n        className=\"close\"\n        data-dismiss=\"alert\"\n        aria-label=\"Close\"\n        onClick={dismiss}\n      >\n        <span aria-hidden=\"true\">&times;</span>\n      </button>\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport { NetworkErrorMessage } from \"./NetworkErrorMessage\";\n\nexport function ConnectWallet({ connectWallet, networkError, dismiss }) {\n  return (\n    <div className=\"container\">\n      <div className=\"row justify-content-md-center\">\n        <div className=\"col-12 text-center\">\n          {networkError && (\n            <NetworkErrorMessage \n              message={networkError} \n              dismiss={dismiss} \n            />\n          )}\n        </div>\n        <div className=\"col-6 p-4 text-center\">\n          <p>Please connect to your wallet.</p>\n          <button\n            className=\"btn btn-warning\"\n            type=\"button\"\n            onClick={connectWallet}\n          >\n            Connect Wallet\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport function Loading() {\n  return (\n    <div\n      style={{\n        position: \"fixed\",\n        zIndex: 2,\n        top: 0,\n        left: 0,\n        width: \"100%\",\n        height: \"100%\",\n        background: \"rgba(255, 255, 255, 0.5)\",\n      }}\n    >\n      <div\n        style={{\n          position: \"absolute\",\n          zIndex: 3,\n          top: \"50%\",\n          left: \"50%\",\n          width: \"100px\",\n          height: \"50px\",\n          marginLeft: \"-50px\",\n          marginTop: \" -25px\",\n          textAlign: \"center\",\n        }}\n      >\n        <div className=\"spinner-border\" role=\"status\">\n          <span className=\"sr-only\">Loading...</span>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport function Transfer({ transferTokens, tokenSymbol, accounts }) {\n  return (\n    <div>\n      <h4>Transfer</h4>\n      <form\n        onSubmit={(event) => {\n          // This function just calls the transferTokens callback with the\n          // form's data.\n          event.preventDefault();\n\n          const formData = new FormData(event.target);\n          const to = formData.get(\"to\");\n          const amount = formData.get(\"amount\");\n\n          if (to && amount) {\n            transferTokens(to, amount);\n          }\n        }}\n      >\n        <div className=\"form-group\">\n          <label>Amount of {tokenSymbol}</label>\n          <input\n            className=\"form-control\"\n            type=\"number\"\n            step=\"1\"\n            name=\"amount\"\n            placeholder=\"1\"\n            required\n          />\n        </div>\n        <div className=\"form-group\">\n        <label>Recipient</label>\n          <select name=\"to\" className=\"form-control\">\n            <option name=\"to\" value={accounts.lender}>lender</option>\n            <option name=\"to\" value={accounts.borrower}>borrower</option>\n          </select>\n        </div>\n        <div className=\"form-group\">\n          <input className=\"btn btn-primary\" type=\"submit\" value=\"Transfer\" />\n        </div>\n      </form>\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport function TransferFrom({ transferFromTokens, tokenSymbol, accounts }) {\n  return (\n    <div>\n      <h4>TransferFrom</h4>\n      <form\n        onSubmit={(event) => {\n          // This function just calls the transferTokens callback with the\n          // form's data.\n          event.preventDefault();\n\n          const formData = new FormData(event.target);\n          const from = formData.get(\"from\");\n          const to = formData.get(\"to\");\n          const amount = formData.get(\"amount\");\n\n          if (from && to && amount) {\n            transferFromTokens(from, to, amount);\n          }\n        }}\n      >\n        <div className=\"form-group\">\n          <label>Amount of {tokenSymbol}</label>\n          <input\n            className=\"form-control\"\n            type=\"number\"\n            step=\"1\"\n            name=\"amount\"\n            placeholder=\"1\"\n            required\n          />\n        </div>\n        <div className=\"form-group\">\n        <label>Sender</label>\n          <select name=\"from\" className=\"form-control\">\n            <option name=\"from\" value={accounts.borrower}>borrower</option>\n            <option name=\"from\" value={accounts.lender}>lender</option>\n          </select>\n        </div>\n        <div className=\"form-group\">\n        <label>Recipient</label>\n          <select name=\"to\" className=\"form-control\">\n            <option name=\"to\" value={accounts.borrower}>borrower</option>\n            <option name=\"to\" value={accounts.lender}>lender</option>\n          </select>\n        </div>\n        <div className=\"form-group\">\n          <input className=\"btn btn-primary\" type=\"submit\" value=\"Transfer\" />\n        </div>\n      </form>\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport function Allowance({ approve }) {\n  return (\n    <div>\n      <h4>Approve</h4>\n      <form\n        onSubmit={(event) => {\n          // This function just calls the transferTokens callback with the\n          // form's data.\n          event.preventDefault();\n\n          const formData = new FormData(event.target);\n          const amount = formData.get(\"amount\");\n\n\n          if (amount) {\n            approve(amount);\n          }\n        }}\n      >\n        <div className=\"form-group\">\n          <label>Amount</label>\n          <input\n            className=\"form-control\"\n            type=\"number\"\n            step=\"1\"\n            name=\"amount\"\n            placeholder=\"1\"\n            required\n          />\n        </div>\n        <div className=\"form-group\">\n          <input className=\"btn btn-primary\" type=\"submit\" value=\"approve\" />\n        </div>\n      </form>\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport function TransactionErrorMessage({ message, dismiss }) {\n  return (\n    <div className=\"alert alert-danger\" role=\"alert\">\n      Error sending transaction: {message.substring(0, 100)}\n      <button\n        type=\"button\"\n        className=\"close\"\n        data-dismiss=\"alert\"\n        aria-label=\"Close\"\n        onClick={dismiss}\n      >\n        <span aria-hidden=\"true\">&times;</span>\n      </button>\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport function WaitingForTransactionMessage({ txHash }) {\n  return (\n    <div className=\"alert alert-info\" role=\"alert\">\n      Waiting for transaction <strong>{txHash}</strong> to be mined\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport function NoTokensMessage({ selectedAddress }) {\n  return (\n    <>\n      <p>You don't have tokens to transfer</p>\n    </>\n  );\n}\n","import React from \"react\";\n\nexport function Contract({ tokenData }) {\n    return (\n        <div\n            style={{\n                background: \"rgba(255, 255, 2, 1)\",\n                width: \"100%\",\n            }}\n        >\n            <div className=\"container\">\n                <h1>Contract Info</h1>\n                <div className=\"row\">\n                    <div className=\"col-2\">\n                        <p>token:</p>\n                        <p>symbol:</p>\n                        <p>address:</p>\n                        <p>totalSupply:</p>\n                    </div>\n                    <div className=\"col-10\">\n                        <p><b>{tokenData.name}</b></p>\n                        <p><b>{tokenData.symbol}</b></p>\n                        <p><b>{tokenData.address}</b></p>\n                        <p><b>$ {(Math.round(tokenData.total * tokenData.decimals ** 10) / (tokenData.decimals ** 10)).toFixed(tokenData.decimals).toString()}</b></p>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n","import React from \"react\";\n\n// We'll use ethers to interact with the Ethereum network and our contract\nimport { ethers } from \"ethers\";\n\n// We import the contract's artifacts and address here, as we are going to be\n// using them with ethers\nimport ABI from \"../contract/abi.json\";\nimport ADR from \"../contract/adr.json\";\nimport ACC from \"../contract/acc.json\";\n\n// All the logic of this dapp is contained in the Dapp component.\n// These other components are just presentational ones: they don't have any\n// logic. They just render HTML.\nimport { NoWalletDetected } from \"./NoWalletDetected\";\nimport { ConnectWallet } from \"./ConnectWallet\";\nimport { Loading } from \"./Loading\";\nimport { Transfer } from \"./Transfer\";\nimport { TransferFrom } from \"./TransferFrom\";\nimport { Allowance } from \"./Allowance\";\nimport { TransactionErrorMessage } from \"./TransactionErrorMessage\";\nimport { WaitingForTransactionMessage } from \"./WaitingForTransactionMessage\";\nimport { NoTokensMessage } from \"./NoTokensMessage\";\nimport { Contract } from \"./Contract\";\n\n\nconst ERROR_CODE_TX_REJECTED_BY_USER = 4001;\n\n\nexport class Dapp extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.initialState = {\n      tokenData: undefined,\n      total: undefined,\n      selectedAddress: undefined,\n      selectedName: undefined,\n      balance: undefined,\n      allowance: undefined,\n      txBeingSent: undefined,\n      transactionError: undefined,\n      networkError: undefined,\n      accountError: undefined,\n    };\n\n    this.state = this.initialState;\n\n  }\n\n\n\n  render() {\n\n    if (window.ethereum === undefined) {\n      return <NoWalletDetected />;\n    }\n\n\n    if (this.state.networkError) {\n      return (\n        <ConnectWallet\n          connectWallet={() => this._connectWallet()}\n          networkError={this.state.networkError}\n          dismiss={() => this._dismissNetworkError()}\n        />\n      );\n    }\n\n    if (this.state.accountError ||\n      this.state.accounts === undefined ||\n      ((this.state.selectedAddress !== this.state.accounts.controller.toLowerCase()) && (this.state.selectedAddress !== this.state.accounts.lender.toLowerCase()) && (this.state.selectedAddress !== this.state.accounts.borrower.toLowerCase()))) {\n      return (\n        <ConnectWallet\n          connectWallet={() => this._connectWallet()}\n          networkError={this.state.accountError}\n          dismiss={() => this._dismissAccountError()}\n        />\n      );\n    }\n\n    if (!this.state.tokenData || !this.state.accounts) {\n      return <Loading />;\n    }\n    console.log(this.state)\n    if (this.state.selectedName === \"controller\") {\n      return (\n        <div className=\"\">\n          <div className=\"row\">\n            <Contract tokenData={this.state.tokenData} />\n          </div>\n\n\n          <div className=\"container\">\n\n          <h2>Controller's Account</h2>\n\n            <div className=\"row\">\n              <div className=\"col-6 p-3 card\">\n                <h2>Lender</h2>\n                <p>\n                  Balance:  <b>$ {(Math.round(this.state.p1balance * this.state.tokenData.decimals ** 10) / (this.state.tokenData.decimals ** 10)).toFixed(this.state.tokenData.decimals).toString()}</b>\n                </p>\n                <p>\n                  Allowed:  <b>$ {(Math.round(this.state.p1allowance * this.state.tokenData.decimals ** 10) / (this.state.tokenData.decimals ** 10)).toFixed(this.state.tokenData.decimals).toString()}</b>\n                </p>\n              </div>\n              <div className=\"col-6 p-3 card\">\n                <h2>Borrower</h2>\n                <p>\n                  Balance:  <b>$ {(Math.round(this.state.p2balance * this.state.tokenData.decimals ** 10) / (this.state.tokenData.decimals ** 10)).toFixed(this.state.tokenData.decimals).toString()}</b>\n                </p>\n                <p>\n                  Allowed:  <b>$ {(Math.round(this.state.p2allowance * this.state.tokenData.decimals ** 10) / (this.state.tokenData.decimals ** 10)).toFixed(this.state.tokenData.decimals).toString()}</b>\n                </p>\n              </div>\n            </div>\n            <div>\n              {this.state.txBeingSent && (<WaitingForTransactionMessage txHash={this.state.txBeingSent} />)}\n              {this.state.transactionError && (\n                <TransactionErrorMessage\n                  message={this._getRpcErrorMessage(this.state.transactionError)}\n                  dismiss={() => this._dismissTransactionError()}\n                />)}\n\n            </div>\n\n\n          <div className=\"row mt-10\">\n            <div className=\"col-6 card\">\n              {this.state.balance.eq(0) && (\n                <NoTokensMessage selectedAddress={this.state.selectedAddress} />\n              )}\n              {this.state.balance.gt(0) && (\n                <Transfer\n                  transferTokens={(to, amount) =>\n                    this._transferTokens(to, amount)\n                  }\n                  tokenSymbol={this.state.tokenData.symbol}\n                  accounts={this.state.accounts}\n                />\n              )}\n            </div>\n            <div className=\"col-6 card\">\n              {this.state.balance.eq(0) && (\n                <NoTokensMessage selectedAddress={this.state.selectedAddress} />\n              )}\n              {this.state.balance.gt(0) && (\n                <TransferFrom\n                transferFromTokens={(from, to, amount) =>\n                    this._transferFromTokens(from, to, amount)\n                  }\n                  tokenSymbol={this.state.tokenData.symbol}\n                  accounts={this.state.accounts}\n                />\n              )}\n            </div>\n          </div>\n          </div>\n        </div>\n      );\n\n\n    } else if (this.state.selectedName === \"lender\" || this.state.selectedName === \"borrower\") {\n      return (\n        <div className=\"\">\n          <div className=\"row\">\n            <Contract tokenData={this.state.tokenData} />\n          </div>\n\n\n          <div className=\"container\">\n            <div className=\"row\">\n              <h1>{this.state.selectedName}</h1>\n              </div>\n              <div className=\"row card\">\n                <div className=\"col-3\">\n                  <p>Balance:</p>\n                  <p>Approved amount:</p>\n                </div>\n                <div className=\"col-3\">\n                  <p><b>$ {(Math.round(this.state.balance * this.state.tokenData.decimals ** 10) / (this.state.tokenData.decimals ** 10)).toFixed(this.state.tokenData.decimals).toString()}</b></p>\n                  <p><b>$ {(Math.round(this.state.allowance * this.state.tokenData.decimals ** 10) / (this.state.tokenData.decimals ** 10)).toFixed(this.state.tokenData.decimals).toString()}</b></p>\n                </div>\n              </div>\n\n              <div>\n\n                {this.state.txBeingSent && (<WaitingForTransactionMessage txHash={this.state.txBeingSent} />)}\n\n                {this.state.transactionError && (\n                  <TransactionErrorMessage\n                    message={this._getRpcErrorMessage(this.state.transactionError)}\n                    dismiss={() => this._dismissTransactionError()}\n                  />)}\n              </div>\n            <div className=\"row card\">\n              <div className=\"col-4\">\n\n                {this.state.balance.eq(0) && (\n                  <NoTokensMessage selectedAddress={this.state.selectedAddress} />\n                )}\n\n                {this.state.balance.gt(0) && (\n                  <Allowance\n                    approve={(amount) =>\n                      this._setAllowance(amount)\n                    }\n                    tokenSymbol={this.state.tokenData.symbol}\n                  />\n                )}\n              </div>\n              <div className=\"row\">\n                <div className=\"col-4\">\n\n                  {this.state.balance.eq(0)}\n\n\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      );\n\n    }\n  }\n\n\n  componentWillUnmount() {\n\n    this._stopPollingData();\n  }\n\n  async _connectWallet() {\n\n    const [selectedAddress] = await window.ethereum.enable();\n\n    if (!this._checkNetwork()) {\n      return;\n    }\n\n    this._initialize(selectedAddress)\n\n    window.ethereum.on(\"accountsChanged\", ([newAddress]) => {\n      this._stopPollingData();\n      this._resetState();\n\n      this._initialize(newAddress);\n\n      return\n    });\n\n    window.ethereum.on(\"networkChanged\", ([networkId]) => {\n      this._stopPollingData();\n      this._resetState();\n    });\n  }\n\n  async _initialize(userAddress) {\n\n    let accounts = ACC.accounts\n    let wallet = {}\n    let selectedName = undefined\n    await Object.keys(accounts).forEach(key => {\n      if (userAddress.toLowerCase() === key.toLowerCase()) {\n        selectedName = accounts[key]\n        wallet[accounts[key]] = key\n      } else {\n        wallet[accounts[key]] = key\n      }\n    });\n\n    await this.setState({\n      accounts: wallet,\n      selectedName: selectedName,\n      selectedAddress: userAddress,\n    });\n\n    if (selectedName === undefined) {\n      this.setState({\n        accountError: 'Please use one of the first 5 accounts provided by the mnemonic in .env '\n      });\n      return false\n    }\n\n    this._intializeEthers();\n    this._getTokenData();\n    this._startPollingData();\n\n    return true\n  }\n\n  async _intializeEthers() {\n    this._provider = new ethers.providers.Web3Provider(window.ethereum);\n\n    this._token = new ethers.Contract(\n      ADR.contract,\n      ABI.abi,\n      this._provider.getSigner(0)\n    );\n\n\n  }\n\n  _startPollingData() {\n    this._pollDataInterval = setInterval(() => this._updateAccount(), 1000);\n\n    this._updateAccount();\n\n  }\n\n  _stopPollingData() {\n    clearInterval(this._pollDataInterval);\n    this._pollDataInterval = undefined;\n  }\n\n  async _getTokenData() {\n    const name = await this._token.name();\n    const symbol = await this._token.symbol();\n    const decimals = await this._token.decimals();\n    const total = await this._token.totalSupply();\n    const address = await this._token.address;\n\n    this.setState({ tokenData: { name, symbol, decimals, total, address } });\n  }\n\n  async _updateAccount() {\n\n    if (this.state.selectedAddress !== this.state.accounts.controller.toLowerCase()) {\n      let balance = await this._token.balanceOf(this.state.selectedAddress);\n      let allowance = await this._token.allowance(this.state.selectedAddress, this.state.accounts.controller);\n\n      await this.setState({ balance, allowance });\n\n    } else {\n\n      let balance = await this._token.balanceOf(this.state.selectedAddress);\n\n      await this.setState({ balance });\n\n      let p1balance = await this._token.balanceOf(this.state.accounts.lender);\n      let p1allowance = await this._token.allowance(this.state.accounts.lender, this.state.accounts.controller);\n\n      await this.setState({ p1balance, p1allowance });\n\n      let p2balance = await this._token.balanceOf(this.state.accounts.borrower);\n      let p2allowance = await this._token.allowance(this.state.accounts.borrower, this.state.accounts.controller);\n\n      await this.setState({ p2balance, p2allowance });\n    }\n\n\n\n\n  }\n\n  async _transferTokens(to, amount) {\n    try {\n\n      this._dismissTransactionError();\n\n      const tx = await this._token.transfer(to, amount);\n      this.setState({ txBeingSent: tx.hash });\n\n      const receipt = await tx.wait();\n\n      if (receipt.status === 0) {\n\n        throw new Error(\"Transaction failed\");\n      }\n\n      await this._updateAccount();\n    } catch (error) {\n      // REJECTED TX BY USER\n      if (error.code === ERROR_CODE_TX_REJECTED_BY_USER) {\n        return;\n      }\n\n      console.error(error);\n      this.setState({ transactionError: error });\n    } finally {\n\n      this.setState({ txBeingSent: undefined });\n    }\n  }\n\n  async _transferFromTokens(from, to, amount) {\n    try {\n\n      this._dismissTransactionError();\n\n\n      const tx = await this._token.transferFrom(from, to, amount);\n      this.setState({ txBeingSent: tx.hash });\n\n      const receipt = await tx.wait();\n\n      if (receipt.status === 0) {\n\n        throw new Error(\"Transaction failed\");\n      }\n\n      await this._updateAccount();\n    } catch (error) {\n      // REJECTED TX BY USER\n      if (error.code === ERROR_CODE_TX_REJECTED_BY_USER) {\n        return;\n      }\n\n      this.setState({ transactionError: error });\n    } finally {\n\n      this.setState({ txBeingSent: undefined });\n    }\n  }\n\n  async _setAllowance(amount) {\n\n    try {\n\n      this._dismissTransactionError();\n\n      const tx2 = await this._token.approve(this.state.accounts.controller, amount);\n      this.setState({ txBeingSent: tx2.hash });\n\n      const receipt = await tx2.wait();\n\n      if (receipt.status === 0) {\n        throw new Error(\"Transaction failed\");\n      }\n\n      await this._updateAccount();\n    } catch (error) {\n      // REJECTED TX BY USER\n      if (error.code === ERROR_CODE_TX_REJECTED_BY_USER) {\n        return;\n      }\n\n      console.error(error);\n      this.setState({ transactionError: error });\n    } finally {\n\n      this.setState({ txBeingSent: undefined });\n    }\n  }\n\n  _dismissTransactionError() {\n    this.setState({ transactionError: undefined });\n  }\n\n  _dismissNetworkError() {\n    this.setState({ networkError: undefined });\n  }\n\n  _dismissAccountError() {\n    this.setState({ accountError: undefined });\n    return;\n  }\n\n  _getRpcErrorMessage(error) {\n    let err = error\n\n    return err.error.message;\n  }\n\n  _resetState() {\n    this.setState(this.initialState);\n  }\n\n  _checkNetwork() {\n    let network = ADR.network\n\n    if (window.ethereum.networkVersion !== ADR.networkId) {\n      this.setState({\n        networkError: `Please connect Metamask to network: ${network}`\n      });\n\n      return false;\n    }\n    return true\n  }\n\n  _checkAccounts() {\n\n    if (this.state.accounts === undefined ||\n      ((this.state.selectedAddress !== this.state.accounts.controller.toLowerCase()) && (this.state.selectedAddress !== this.state.accounts.lender.toLowerCase()) && (this.state.selectedAddress !== this.state.accounts.borrower.toLowerCase()))) {\n      this.setState({\n        accountError: 'Please use one of the first accounts provided by the mnemonic in .env '\n      });\n      return false\n    }\n\n    return true;\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Dapp } from \"./components/Dapp\";\n\nimport \"bootstrap/dist/css/bootstrap.css\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Dapp />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}